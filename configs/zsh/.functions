# List hidden files as well
function v () {
  selected=$(fd --max-depth 6 --type file --hidden | fzf)
  if [[ -z $selected ]]; then
    exit 0
  fi
  vim $selected
}

function cdl(){
  VAR=$(ls -td -- */ | head -n 1 | cut -d'/' -f1); cd ${VAR}
}


function vimz() {
  vim "$(fz $1)"
 }

function remove_carriage_returns () {
	sed -i 's/\r//g' $1
}

function myip() {
  ifconfig | awk '/inet /&&!/127.0.0.1/{print $2;exit}'
}

function remove_all_carriage_returns (){
    find . -name $1 | xargs sed -i 's/\r//g'
}

function f () {
	find $1 -name $2 2>/dev/null
}

kill_docker_port() {
  local port="$1"

  if [ -z "$port" ]; then
    echo "Error: Please provide a port number as an argument."
    return 1
  fi

  # Check if the port is a valid integer
  if ! [[ "$port" =~ ^[0-9]+$ ]]; then
    echo "Error: Port number must be an integer."
    return 1
  fi

  # Find containers using the specified port
  containers=$(docker ps -q --filter "port=$port")

  if [ -z "$containers" ]; then
    echo "No containers are currently using port $port."
    return 0
  fi

  # Kill the containers
  echo "Killing containers using port $port..."
  docker kill $containers
  echo "Containers using port $port have been killed."
}

function kill_port() {
    local port=$1
    if [ -z "$port" ]; then
        echo "Usage: kill_port <port_number>"
        return 1
    fi

    # Get all PIDs listening on the port
    local pids=$(lsof -ti TCP:$port)

    if [ -n "$pids" ]; then
        echo "Found processes on port $port: $pids"

        # Try graceful termination first
        for pid in $pids; do
            if kill -0 $pid 2>/dev/null; then
                echo "Attempting graceful termination of PID $pid..."
                kill -TERM $pid
            fi
        done

        # Wait a bit for graceful termination
        sleep 2

        # Check if processes are still running and force kill if needed
        local remaining_pids=$(lsof -ti TCP:$port)
        if [ -n "$remaining_pids" ]; then
            echo "Some processes still running, force killing: $remaining_pids"
            for pid in $remaining_pids; do
                if kill -0 $pid 2>/dev/null; then
                    kill -9 $pid
                    echo "Force killed PID $pid"
                fi
            done
        fi

        # Final check
        local final_check=$(lsof -ti TCP:$port)
        if [ -z "$final_check" ]; then
            echo "All processes on port $port successfully killed."
        else
            echo "Warning: Some processes may still be running on port $port: $final_check"
        fi
    else
        echo "No process found on port $port."
    fi
}

function cd() {
    builtin cd "$@" && ls -F
}

# convert_vid inputfile outputfile
function convert_vid() {
	ffmpeg -i $1 -vcodec libx264 -acodec aac $2.mp4
}

function convert_scale_to_phone() {
  ffmpeg -i $1 -vf scale=480:-1 $2
}

# convert_vid inputfile outputfile
function convert_audio() {
	ffmpeg -i $1 -acodec aac $2.aac
}

function fz() {
  rg --files --follow -g '!{node_modules,.git,.bare}' $1 | fzf
 }

function list_dir_with_fzf() {
  # giving a path, pipe all the directories in the path to fzf
  # cd $(ls -d $1*/ | fzf)
  # ls -d $1*/ | fzf
  find $1 -maxdepth 1 -type d -not -path '*/\.*' |
  fzf
}

function git_fetch()  {
    # for some reason git fetch does not work without removing/adding remote repo
    remote=$(git remote -v | sed -e 's/([^()]*)//g' | head -n 1)
    git remote rm origin
    bash -c "git remote add $remote"
    git fetch --prune --all
}

function clone_worktree()  {
# clone the git repo into a bare repo and setup the directory structure
		REPO_NAME=$(echo "$1" | awk -F "[./]" '{print $(NF-1)}')
		mkdir $REPO_NAME
		git clone --bare $1 $REPO_NAME/.bare/
		echo "gitdir: ./.bare" > $REPO_NAME/.git
    cd $REPO_NAME
}

function dkill() {
  docker rm -vf $(docker ps -aq)
}

function cdf() {
  cd $(find ~/work/focaldata ~/work/old/checkout ~/work ~/work2 ~/work3 ~/projects ~/ -mindepth 1 -maxdepth 1 -type d | fzf)
}

function ip() {
  MYIP=`dig +short myip.opendns.com @resolver1.opendns.com`
  DATE=`date +%F`
  echo "$MYIP" 
}

function activate_venv() {
	if [ ! -d "./.venv" ]; then \
		conda create --prefix ./.venv python=3.12; \
	fi
	conda activate ./.venv
}

# OpenCode wrapper function
# Usage: oc <input>
oc() {
    if [ $# -eq 0 ]; then
        echo "Usage: oc <input>"
        return 1
    fi
    opencode run -m anthropic/claude-sonnet-4-20250514 "$*"
}

# Change the current working directory when exiting Yazi.
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

# macOS only
# Open the current directory in a Ghostty Window
ghost() {
  local dir="${1:-$PWD}"
  osascript <<EOF
    tell application "Ghostty"
      activate
      if it is running then
        tell application "System Events"
          keystroke "t" using {command down}
          delay 0.3
          keystroke "cd ${dir}"
          keystroke return
        end tell
      end if
    end tell
EOF
}

create_fd_docs_link() {
    local target_dir="$HOME/work/focaldata/fd-docs"
    local link_name="fd-docs"
    
    # Check if target directory exists
    if [[ ! -d "$target_dir" ]]; then
        echo "Error: Target directory $target_dir does not exist"
        return 1
    fi
    
    # Remove existing link if it exists
    if [[ -L "$link_name" ]]; then
        rm "$link_name"
        echo "Removed existing symlink"
    elif [[ -e "$link_name" ]]; then
        echo "Error: $link_name exists but is not a symlink"
        return 1
    fi
    
    # Create the symbolic link
    ln -s "$target_dir" "$link_name"
    echo "Created symlink: $(pwd)/$link_name -> $target_dir"
}

def ff() {
    aerospace list-windows --all \
      | fzf --bind 'enter:execute(bash -c "aerospace focus --window-id {1}")+abort'
}
